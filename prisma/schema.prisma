// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// ----------------------------------------------------------------
// --------------------- DATABASE MODELS --------------------------

enum UserRole {
  ADMIN
  USER
}

enum status {
  Active
  Inactive
}

enum type {
  Homeowner
  Tenant
}

model User {
<<<<<<< HEAD
  id           String        @id @default(cuid())
  name String?
  email String?   @unique
  personalInfo PersonalInfo?
  propertyInfo PropertyInfo?
  status       status        @default(Active)
  password     String?
  role         UserRole      @default(USER)

  accounts Account[]
}

model PersonalInfo {
  id           String    @id @default(cuid())
  userID       String    @unique
  firstName    String?
  middleName   String?
  lastName     String?
  phoneNumber  String?
  birthDay     DateTime?
  vehicles     Vehicle[]
  type         type?

  user User @relation(fields: [userID], references: [id])
}

model PropertyInfo {
  id           String    @id @default(cuid())
  userID       String    @unique
  address      String?
  lotNumber    String?
  lotSize      String?
  document PropertyDocument[]
  purchaseDate DateTime?

  user User @relation(fields: [userID], references: [id])
}

model PropertyDocument {
  id String @id @default(cuid())
  propertyID String
  fileName String?

  property PropertyInfo @relation(fields: [propertyID], references: [id], onDelete: Cascade)
}

model Vehicle {
  id       String  @id @default(cuid())
  infoID   String
  plateNum String?

  personalInfo PersonalInfo @relation(fields: [infoID], references: [id])
=======
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  image         String?
  password      String?
  role          UserRole  @default(USER)
  accounts      Account[]
  
  info          PersonalInfo?
}

model PersonalInfo {
  id            String    @id @default(cuid())
  userId        String
  firstName     String?
  middleName    String?
  lastName      String?
  contact       String?
  birthday      DateTime?
  vehicles      Vehicle[]

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([userId])
}

model Vehicle {
  id String @id @default(cuid())
  infoId String
  plateNum String?

  info PersonalInfo @relation(fields: [infoId], references: [id], onDelete: Cascade)
>>>>>>> main
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model ResetPasswordToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}
